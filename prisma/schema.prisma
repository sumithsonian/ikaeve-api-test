// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ゲームタイトルマスタ
enum GameTitle {
  SPLATOON2
  SPLATOON3
}

// 公開設定マスタ
enum Privacy {
  PUBLIC // 公開
  LIMITED // 限定公開
  PRIVATE // 非公開
}

// 順位マスタ
enum RankPosition {
  DOWN // 降下
  KEEP // 維持
  UP // 上昇
}

// トーナメント形式マスタ
enum TournamentSystem {
  SINGLE_ELIMINATION // シングルエリミネーション
  DOUBLE_ELIMINATION // ダブルエリミネーション
  ROUND_ROBIN // リーグ（シングルラウンドロビン）
  SWISS_DRAW // スイスドロー
}

// トーナメント組み合わせマスタ
enum TournamentMatching {
  AUTO // 自動(1位昇順、2位降順)
  RATING // レーティング
  SHUFFLE // シャッフル
}

// シーズンマスタ
enum Season {
  EARLY_SPRING
  SPRING
  SUMMER
  FALL
  ANNUAL
}

// 大会ステータスマスタ
enum Status {
  OPEN // 開催中
  RECRUITING // 募集中
  CLOSE // 終了
}

// 大会ステージマスタ
enum Stage {
  QUALIFYING // 予選
  FINALS // 本戦
  FINAL // 決勝戦
}

// 公式大会ステータスマスタ
enum SeriesApprovalStatus {
  APPLYING // 申請済み
  APPROVED // 承認済み
  REJECTED // 棄却
}

// ティアマスタ
enum Tear {
  X
  S
  A
  B
}

// シリーズ
model Series {
  id             BigInt               @id @default(autoincrement())
  name           String               @db.VarChar(255) // 名称
  permanentUrl   String               @map("permanent_url") @db.VarChar(1023) // 固定URL
  imageUrl       String               @map("image_url") @db.VarChar(1023) // シリーズ画像
  user           User? // ユーザー
  team           Team? // チーム
  tournaments    Tournament           @relation(fields: [tournamentsId], references: [id])
  tournamentsId  BigInt               @unique @map("tournaments_id")
  approvalStatus SeriesApprovalStatus @map("approval_status") // 公式大会申請ステータス
  createdAt      DateTime             @default(now()) @map("created_at")
  updatedAt      DateTime             @updatedAt @map("updated_at")

  @@map("series")
}

// ユーザ
model User {
  id               BigInt         @id @default(autoincrement())
  name             String         @db.VarChar(255) // 名前
  permanentUrl     String         @map("permanent_url") @db.VarChar(1023) // 固定URL
  imageUrl         String         @map("image_url") @db.VarChar(1023) // アイコン画像
  twitterUsername  String         @map("twitter_username") @db.VarChar(255) // twitterユーザーネーム
  twitterUid       String         @unique @map("twitter_uid") @db.VarChar(255) // Twitter UID
  comment          String         @db.VarChar(1023) // コメント
  friendCode       String         @map("friend_code") @db.VarChar(255) // フレンドコード
  privacy          Privacy
  series           Series         @relation(fields: [seriesId], references: [id])
  seriesId         BigInt         @unique @map("series_id")
  tournaments      Tournament     @relation(fields: [tournamentsId], references: [id])
  tournamentsId    BigInt         @unique @map("tournaments_id")
  tournamentUser   TournamentUser @relation(fields: [tournamentUserId], references: [id])
  tournamentUserId BigInt         @unique @map("tournament_user_id")
  accessTokens     AccessToken    @relation(fields: [accessTokensId], references: [id])
  accessTokensId   BigInt         @unique @map("access_tokens_id")
  userPoints       UserPoint      @relation(fields: [userPointsId], references: [id])
  userPointsId     BigInt         @unique @map("user_points_id")
  teamUser         TeamUser       @relation(fields: [teamUserId], references: [id])
  teamUserId       BigInt         @unique @map("team_user_id")
  userRanks        UserRank       @relation(fields: [userRanksId], references: [id])
  userRanksId      BigInt         @unique @map("user_ranks_id")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")

  @@map("users")
}

// チーム
model Team {
  id                    BigInt          @id @default(autoincrement())
  name                  String          @db.VarChar(255) // 名前
  permanentUrl          String          @map("permanent_url") @db.VarChar(1023) // 固定URL
  imageUrl              String          @map("image_url") @db.VarChar(1023) // アイコン画像
  comment               String          @db.VarChar(1023) // コメント
  twitterUrl            String          @map("twitter_url") @db.VarChar(1023) // Twitter URL
  discordUrl            String          @map("discord_url") @db.VarChar(1023) // Discord URL
  privacy               Privacy
  series                Series          @relation(fields: [seriesId], references: [id])
  seriesId              BigInt          @unique @map("series_id")
  tournaments           Tournament      @relation(fields: [tournamentsId], references: [id])
  tournamentsId         BigInt          @unique @map("tournaments_id")
  teamPoints            TeamPoint       @relation(fields: [teamPointsId], references: [id])
  teamPointsId          BigInt          @unique @map("team_points_id")
  tournamentAlphaTeam   TournamentMatch @relation("alphaTeam", fields: [tournamentAlphaTeamId], references: [id])
  tournamentAlphaTeamId BigInt          @unique @map("tournament_alpha_team_id")
  tournamentBravoTeam   TournamentMatch @relation("bravoTeam", fields: [tournamentBravoTeamId], references: [id])
  tournamentBravoTeamId BigInt          @unique @map("tournament_bravo_team_id")
  teamUser              TeamUser        @relation(fields: [teamUserId], references: [id])
  teamUserId            BigInt          @unique @map("team_user_id")
  teamRanks             TeamRank        @relation(fields: [teamRanksId], references: [id])
  teamRanksId           BigInt          @unique @map("team_ranks_id")
  tournamentTeam        TournamentTeam  @relation(fields: [tournamentTeamId], references: [id])
  tournamentTeamId      BigInt          @unique @map("tournament_team_id")
  createdAt             DateTime        @default(now()) @map("created_at")
  updatedAt             DateTime        @updatedAt @map("updated_at")

  @@map("teams")
}

model Tournament {
  id                     BigInt              @id @default(autoincrement())
  name                   String              @db.VarChar(255) // 大会名
  permanentUrl           String              @map("permanent_url") @db.VarChar(1023) // 固定URL
  imageUrl               String              @map("image_url") @db.VarChar(1023) // 大会画像
  startedAt              DateTime            @map("started_at") // 募集開始日時
  endedAt                DateTime            @map("ended_at") // 募集終了日時
  openedAt               DateTime            @map("opened_at") // 開催日時
  closedAt               DateTime            @map("closed_at") // 終了日時
  description            String              @db.VarChar(1023) // 大会概要
  gameTitle              GameTitle           @map("game_title") // ゲームタイトル
  series                 Series? // シリーズ
  user                   User? // 主催者ユーザ
  team                   Team? // 主催者チーム
  streamingUrl           String              @map("streaming_url") @db.VarChar(1023) // 配信URL
  teamNumMax             Int                 @map("team_num_max") // 募集チーム数(最小)
  teamNumMin             Int                 @map("team_num_min") // 募集チーム数(最大)
  memberNum              Int                 @map("member_num") // チーム人数
  isQualifyingRequired   Boolean             @map("is_qualifying_required") // 予選有無
  qualifyingSystem       TournamentSystem    @map("qualifying_system") // 予選形式
  qualifyingMatching     TournamentMatching  @map("qualifying_matching") // 予選組み合わせ
  qualifyingPoint        Int                 @map("qualifying_point") // 予選先取点
  qualifyingMaxTeamNum   Int                 @map("qualifying_max_team_num") // 予選1ブロック当たりの最大チーム数
  qualifyingPassOrder    Int                 @map("qualifying_pass_order") // 予選通過順位
  finalsSystem           TournamentSystem    @map("finals_system") // 本戦形式
  finalsMatching         TournamentMatching  @map("finals_matching") // 本戦組み合わせ
  finalsPoint            Int                 @map("finals_point") // 本戦先取点
  isFinalRuleChange      Boolean             @map("is_final_rule_change") // 決勝戦ルール変更有無
  finalPoint             Int                 @map("final_point") // 決勝戦先取点
  isBest8Shuffled        Boolean             @map("is_best8_shuffled") // ベスト8シャッフル有無
  is3rdPlacePlayoff      Boolean             @map("is_3rd_place_playoff") // 3位決定戦有無
  privacy                Privacy // 公開設定
  status                 Status // 大会ステータス
  tournamentUser         TournamentUser      @relation(fields: [tournamentUserId], references: [id])
  tournamentUserId       BigInt              @unique @map("tournament_user_id")
  userPoints             UserPoint           @relation(fields: [userPointsId], references: [id])
  userPointsId           BigInt              @unique @map("user_points_id")
  teamPoints             TeamPoint           @relation(fields: [teamPointsId], references: [id])
  teamPointsId           BigInt              @unique @map("team_points_id")
  tournamentTeam         TournamentTeam      @relation(fields: [tournamentTeamId], references: [id])
  tournamentTeamId       BigInt              @unique @map("tournament_team_id")
  tournamentMatchRules   TournamentMatchRule @relation(fields: [tournamentMatchRulesId], references: [id])
  tournamentMatchRulesId BigInt              @unique @map("tournament_matchRules_id")
  tournamentMatchs       TournamentMatch     @relation(fields: [tournamentMatchsId], references: [id])
  tournamentMatchsId     BigInt              @unique @map("tournament_matchs_id")
  createdAt              DateTime            @default(now()) @map("created_at")
  updatedAt              DateTime            @updatedAt @map("updated_at")

  @@map("tournaments")
}

model TournamentUser {
  id         BigInt      @id @default(autoincrement())
  tournament Tournament? // 大会
  user       User? // ユーザ
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")

  @@map("tournament_user")
}

model AccessToken {
  id         BigInt   @id @default(autoincrement())
  token      String   @db.VarChar(255) // トークン
  user       User? // ユーザ
  expiration Int // 有効期限
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("access_tokens")
}

model UserPoint {
  id         BigInt      @id @default(autoincrement())
  user       User? // ユーザ
  tournament Tournament? // 大会
  point      Int // 付与ポイント
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")

  @@map("user_points")
}

model TeamPoint {
  id         BigInt      @id @default(autoincrement())
  team       Team? // チーム
  tournament Tournament? // 大会
  point      Int // 付与ポイント
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")

  @@map("team_points")
}

model TournamentTeam {
  id         BigInt      @id @default(autoincrement())
  tournament Tournament? // 大会
  team       Team? // チーム
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")

  @@map("tournament_team")
}

model TournamentMatchRule {
  id         BigInt      @id @default(autoincrement())
  tournament Tournament? // 大会
  stage      Stage // 大会ステージ
  set        Int // セット数
  rule       String      @db.VarChar(255)
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")

  @@map("tournament_match_rules")
}

model TournamentMatch {
  id              BigInt      @id @default(autoincrement())
  tournament      Tournament? // 大会
  stage           Stage // 大会ステージ
  block           String      @db.VarChar(255) // ブロック
  round           Int // ラウンド数
  match           Int // 試合数
  alphaTeam       Team?       @relation("alphaTeam") // アルファチーム
  bravoTeam       Team?       @relation("bravoTeam") // ブラボーチーム
  alphaTeamResult Int         @map("alpha_team_result") // アルファチーム勝利数
  bravoTeamResult Int         @map("bravo_team_result") // ブロボーチーム勝利数
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  @@map("tournament_matchs")
}

model TeamUser {
  id                BigInt   @id @default(autoincrement())
  team              Team? // チーム
  user              User? // ユーザ
  isRepresentatived Boolean  @map("is_representatived") // 代表か
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("team_user")
}

model UserRank {
  id           BigInt       @id @default(autoincrement())
  user         User? // ユーザ
  gameTitle    GameTitle    @map("game_title") // ゲームタイトル
  year         Int // 年
  season       Season // シーズン
  point        Int // ポイント
  rankPosition RankPosition @map("rank_position") // 順位変化
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  @@map("user_ranks")
}

model TeamRank {
  id           BigInt       @id @default(autoincrement())
  team         Team? // チーム
  gameTitle    GameTitle    @map("game_title") // ゲームタイトル
  year         Int // 年
  season       Season // シーズン
  point        Int // ポイント
  rankPosition RankPosition @map("rank_position") // 順位変化
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  @@map("team_ranks")
}
