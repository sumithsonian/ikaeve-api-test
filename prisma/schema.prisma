// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ゲームタイトルマスタ
enum GameTitle {
  SPLATOON2
  SPLATOON3
}

// 公開設定マスタ
enum Privacy {
  PUBLIC // 公開
  LIMITED // 限定公開
  PRIVATE // 非公開
}

// 順位マスタ
enum RankPosition {
  DOWN // 降下
  KEEP // 維持
  UP // 上昇
}

// トーナメント形式マスタ
enum TournamentSystem {
  SINGLE_ELIMINATION // シングルエリミネーション
  DOUBLE_ELIMINATION // ダブルエリミネーション
  ROUND_ROBIN // リーグ（シングルラウンドロビン）
  SWISS_DRAW // スイスドロー
}

// トーナメント組み合わせマスタ
enum TournamentMatching {
  AUTO // 自動(1位昇順、2位降順)
  RATING // レーティング
  SHUFFLE // シャッフル
}

// シーズンマスタ
enum Season {
  EARLY_SPRING
  SPRING
  SUMMER
  FALL
  ANNUAL
}

// 大会ステータスマスタ
enum Status {
  OPEN // 開催中
  RECRUITING // 募集中
  CLOSE // 終了
}

// 大会ステージマスタ
enum Stage {
  QUALIFYING // 予選
  FINALS // 本戦
  FINAL // 決勝戦
}

// 公式大会ステータスマスタ
enum SeriesApprovalStatus {
  APPLYING // 申請済み
  APPROVED // 承認済み
  REJECTED // 棄却
}

// ティアマスタ
enum Tear {
  X
  S
  A
  B
}

// シリーズ
model Series {
  id             BigInt               @id @default(autoincrement())
  name           String               @db.VarChar(255) // 名称
  permanentUrl   String               @map("permanent_url") @db.VarChar(1023) // 固定URL
  imageUrl       String               @map("image_url") @db.VarChar(1023) // シリーズ画像
  team           Team                 @relation(fields: [teamID], references: [id])
  teamID         BigInt               @map("team_id") // チーム
  tournaments    Tournament[]
  approvalStatus SeriesApprovalStatus @map("approval_status") // 公式大会申請ステータス
  editedAt       DateTime             @map("edited_at")
  createdAt      DateTime             @default(now()) @map("created_at")
  updatedAt      DateTime             @updatedAt @map("updated_at")

  @@map("series")
}

// ユーザ
model User {
  id              BigInt        @id @default(autoincrement())
  name            String        @db.VarChar(255) // 名前
  permanentUrl    String        @map("permanent_url") @db.VarChar(1023) // 固定URL
  imageUrl        String        @map("image_url") @db.VarChar(1023) // アイコン画像
  twitterUsername String        @map("twitter_username") @db.VarChar(255) // twitterユーザーネーム
  twitterUid      String        @unique @map("twitter_uid") @db.VarChar(255) // Twitter UID
  comment         String        @db.VarChar(1023) // コメント
  friendCode      String        @map("friend_code") @db.VarChar(255) // フレンドコード
  privacy         Privacy
  Tournament      Tournament[]
  AccessToken     AccessToken[]
  UserPoint       UserPoint[]
  TeamUser        TeamUser[]
  UserRank        UserRank[]
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  editedAt        DateTime      @map("edited_at")

  @@map("users")
}

// チーム
model Team {
  id                    BigInt           @id @default(autoincrement())
  name                  String           @db.VarChar(255) // 名前
  permanentUrl          String           @map("permanent_url") @db.VarChar(1023) // 固定URL
  imageUrl              String           @map("image_url") @db.VarChar(1023) // アイコン画像
  comment               String           @db.VarChar(1023) // コメント
  twitterUrl            String           @map("twitter_url") @db.VarChar(1023) // Twitter URL
  discordUrl            String           @map("discord_url") @db.VarChar(1023) // Discord URL
  privacy               Privacy
  tournamentAlphaTeam   TournamentMatch  @relation("alphaTeam", fields: [tournamentAlphaTeamId], references: [id])
  tournamentAlphaTeamId BigInt           @unique @map("tournament_alpha_team_id")
  tournamentBravoTeam   TournamentMatch  @relation("bravoTeam", fields: [tournamentBravoTeamId], references: [id])
  tournamentBravoTeamId BigInt           @unique @map("tournament_bravo_team_id")
  Tournament            Tournament[]
  TeamPoint             TeamPoint[]
  TournamentTeam        TournamentTeam[]
  TeamUser              TeamUser[]
  TeamRank              TeamRank[]
  series                Series[]
  editedAt              DateTime         @map("edited_at")
  createdAt             DateTime         @default(now()) @map("created_at")
  updatedAt             DateTime         @updatedAt @map("updated_at")

  @@map("teams")
}

model Tournament {
  id                   BigInt                @id @default(autoincrement())
  name                 String                @db.VarChar(255) // 大会名
  permanentUrl         String                @map("permanent_url") @db.VarChar(1023) // 固定URL
  imageUrl             String                @map("image_url") @db.VarChar(1023) // 大会画像
  startedAt            DateTime              @map("started_at") // 募集開始日時
  endedAt              DateTime              @map("ended_at") // 募集終了日時
  openedAt             DateTime              @map("opened_at") // 開催日時
  closedAt             DateTime              @map("closed_at") // 終了日時
  description          String                @db.VarChar(1023) // 大会概要
  gameTitle            GameTitle             @map("game_title") // ゲームタイトル
  series               Series?               @relation(fields: [seriesId], references: [id]) // シリーズ
  seriesId             BigInt?
  user                 User?                 @relation(fields: [userId], references: [id]) // 主催者ユーザ
  userId               BigInt?
  team                 Team?                 @relation(fields: [teamId], references: [id]) // 主催者チーム
  teamId               BigInt?
  streamingUrl         String                @map("streaming_url") @db.VarChar(1023) // 配信URL
  teamNumMax           Int                   @map("team_num_max") // 募集チーム数(最小)
  teamNumMin           Int                   @map("team_num_min") // 募集チーム数(最大)
  memberNum            Int                   @map("member_num") // チーム人数
  isQualifyingRequired Boolean               @map("is_qualifying_required") // 予選有無
  qualifyingSystem     TournamentSystem      @map("qualifying_system") // 予選形式
  qualifyingMatching   TournamentMatching    @map("qualifying_matching") // 予選組み合わせ
  qualifyingPoint      Int                   @map("qualifying_point") // 予選先取点
  qualifyingMaxTeamNum Int                   @map("qualifying_max_team_num") // 予選1ブロック当たりの最大チーム数
  qualifyingPassOrder  Int                   @map("qualifying_pass_order") // 予選通過順位
  finalsSystem         TournamentSystem      @map("finals_system") // 本戦形式
  finalsMatching       TournamentMatching    @map("finals_matching") // 本戦組み合わせ
  finalsPoint          Int                   @map("finals_point") // 本戦先取点
  isFinalRuleChange    Boolean               @map("is_final_rule_change") // 決勝戦ルール変更有無
  finalPoint           Int                   @map("final_point") // 決勝戦先取点
  isBest8Shuffled      Boolean               @map("is_best8_shuffled") // ベスト8シャッフル有無
  is3rdPlacePlayoff    Boolean               @map("is_3rd_place_playoff") // 3位決定戦有無
  privacy              Privacy // 公開設定
  status               Status // 大会ステータス
  userPoint            UserPoint[]
  teamPoint            TeamPoint[]
  tournamentTeam       TournamentTeam[]
  tournamentMatchRule  TournamentMatchRule[]
  tournamentMatch      TournamentMatch[]
  editedAt             DateTime              @map("edited_at")
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @updatedAt @map("updated_at")

  @@map("tournaments")
}

model AccessToken {
  id         BigInt   @id @default(autoincrement())
  token      String   @db.VarChar(255) // トークン
  user       User?    @relation(fields: [userId], references: [id]) // ユーザ
  userId     BigInt?
  expiration Int // 有効期限
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("access_tokens")
}

model UserPoint {
  id           BigInt      @id @default(autoincrement())
  user         User?       @relation(fields: [userId], references: [id]) // ユーザ
  userId       BigInt?
  tournament   Tournament? @relation(fields: [tournamentId], references: [id]) // 大会
  tournamentId BigInt?
  point        Int // 付与ポイント
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  @@map("user_points")
}

model TeamPoint {
  id           BigInt      @id @default(autoincrement())
  team         Team?       @relation(fields: [teamId], references: [id]) // チーム
  teamId       BigInt?
  tournament   Tournament? @relation(fields: [tournamentId], references: [id]) // 大会
  tournamentId BigInt?
  point        Int // 付与ポイント
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  @@map("team_points")
}

model TournamentTeam {
  id           BigInt      @id @default(autoincrement())
  tournament   Tournament? @relation(fields: [tournamentId], references: [id]) // 大会
  tournamentId BigInt?
  team         Team?       @relation(fields: [teamId], references: [id]) // チーム
  teamId       BigInt?
  editedAt     DateTime    @map("edited_at")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  @@map("tournament_team")
}

model TournamentMatchRule {
  id           BigInt      @id @default(autoincrement())
  tournament   Tournament? @relation(fields: [tournamentId], references: [id]) // 大会
  tournamentId BigInt?
  stage        Stage // 大会ステージ
  set          Int // セット数
  rule         String      @db.VarChar(255)
  editedAt     DateTime    @map("edited_at")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  @@map("tournament_match_rules")
}

model TournamentMatch {
  id              BigInt      @id @default(autoincrement())
  tournament      Tournament? @relation(fields: [tournamentId], references: [id]) // 大会
  tournamentId    BigInt?
  stage           Stage // 大会ステージ
  block           String      @db.VarChar(255) // ブロック
  round           Int // ラウンド数
  match           Int // 試合数
  alphaTeam       Team?       @relation("alphaTeam") // アルファチーム
  bravoTeam       Team?       @relation("bravoTeam") // ブラボーチーム
  alphaTeamResult Int         @map("alpha_team_result") // アルファチーム勝利数
  bravoTeamResult Int         @map("bravo_team_result") // ブロボーチーム勝利数
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  @@map("tournament_matchs")
}

model TeamUser {
  id                BigInt   @id @default(autoincrement())
  team              Team?    @relation(fields: [teamId], references: [id]) // チーム
  teamId            BigInt?
  user              User?    @relation(fields: [userId], references: [id]) // ユーザ
  userId            BigInt?
  isRepresentatived Boolean  @map("is_representatived") // 代表か
  editedAt          DateTime @map("edited_at")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("team_user")
}

model UserRank {
  id           BigInt       @id @default(autoincrement())
  user         User         @relation(fields: [userId], references: [id]) // ユーザ
  userId       BigInt
  gameTitle    GameTitle    @map("game_title") // ゲームタイトル
  year         Int // 年
  season       Season // シーズン
  point        Int // ポイント
  rankPosition RankPosition @map("rank_position") // 順位変化
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  @@map("user_ranks")
}

model TeamRank {
  id           BigInt       @id @default(autoincrement())
  team         Team         @relation(fields: [teamId], references: [id]) // チーム
  teamId       BigInt
  gameTitle    GameTitle    @map("game_title") // ゲームタイトル
  year         Int // 年
  season       Season // シーズン
  point        Int // ポイント
  rankPosition RankPosition @map("rank_position") // 順位変化
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  @@map("team_ranks")
}
